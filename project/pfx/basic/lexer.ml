# 1 "lexer.mll"
 
  open Utils
  type token =
    | EOF | PUSH | POP | SWAP | NGET | STORE | LOAD
    | ADD | SUB | MUL | DIV | REM | MOD | PRINT
    | INT of int

  let print_token = function
    | EOF -> print_string "EOF"
    | PUSH -> print_string "PUSH"
    | PUSH n -> print_string ("PUSH " ^ string_of_int n)
    | POP -> print_string "POP"
    | SWAP -> print_string "SWAP"
    | NGET -> print_string "NGET"
    | STORE -> print_string "STORE"
    | LOAD -> print_string "LOAD"
    | ADD -> print_string "ADD"
    | SUB -> print_string "SUB"
    | MUL -> print_string "MUL"
    | DIV -> print_string "DIV"
    | REM -> print_string "REM"
    | MOD -> print_string "MOD"
    | PRINT -> print_string "PRINT"
    
    | INT i -> print_int i
  

  (* Exercice 7: Locations *)

  let mk_int loc nb =
    try INT (int_of_string nb)
    with Failure _ -> raise (Utils.Location.Error (Printf.sprintf "Illegal integer '%s': " nb, loc))

  let mk_push loc nb =
    try PUSH (int_of_string nb)
    with Failure _ -> raise (Utils.Location.Error (Printf.sprintf "Illegal push operation '%s': " nb, loc))


# 41 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\237\255\000\000\001\000\000\000\001\000\000\000\002\000\
    \003\000\004\000\005\000\007\000\004\000\017\000\005\000\009\000\
    \016\000\018\000\036\000\001\000\253\255\006\000\255\255\001\000\
    \006\000\018\000\019\000\019\000\032\000\250\255\249\255\027\000\
    \022\000\238\255\034\000\028\000\026\000\038\000\033\000\028\000\
    \000\000\034\000\002\000\034\000\248\255\033\000\047\000\246\255\
    \243\255\051\000\039\000\054\000\040\000\039\000\053\000\054\000\
    \040\000\247\255\056\000\042\000\062\000\060\000\245\255\064\000\
    \062\000\063\000\244\255\064\000\065\000\058\000\242\255\239\255\
    \067\000\060\000\051\000\241\255\052\000\062\000\240\255\063\000\
    ";
  Lexing.lex_backtrk =
   "\255\255\255\255\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\004\000\018\000\255\255\001\000\255\255\000\000\
    \003\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_default =
   "\001\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\000\000\255\255\
    \024\000\255\255\255\255\255\255\255\255\000\000\000\000\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\000\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\000\000\000\000\
    \255\255\255\255\255\255\000\000\255\255\255\255\000\000\255\255\
    ";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\021\000\022\000\022\000\021\000\023\000\021\000\021\000\
    \255\255\000\000\021\000\255\255\021\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \021\000\000\000\000\000\000\000\000\000\000\000\021\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\019\000\024\000\000\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\009\000\000\000\000\000\005\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\011\000\007\000\013\000\000\000\
    \017\000\000\000\003\000\015\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\000\000\000\000\
    \000\000\008\000\048\000\043\000\004\000\079\000\077\000\067\000\
    \065\000\076\000\074\000\058\000\010\000\006\000\012\000\072\000\
    \016\000\068\000\002\000\014\000\063\000\073\000\060\000\069\000\
    \055\000\050\000\049\000\031\000\051\000\041\000\040\000\035\000\
    \042\000\026\000\034\000\030\000\025\000\036\000\028\000\027\000\
    \029\000\032\000\033\000\038\000\030\000\037\000\029\000\039\000\
    \033\000\045\000\044\000\046\000\047\000\048\000\053\000\052\000\
    \044\000\054\000\047\000\056\000\057\000\059\000\057\000\061\000\
    \062\000\064\000\062\000\066\000\066\000\071\000\070\000\071\000\
    \070\000\075\000\075\000\078\000\078\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \020\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\023\000\000\000\000\000\000\000\021\000\
    \024\000\255\255\021\000\024\000\021\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\021\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\019\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\255\255\
    \000\000\255\255\000\000\000\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\255\255\255\255\
    \255\255\000\000\040\000\042\000\000\000\002\000\003\000\008\000\
    \009\000\004\000\005\000\012\000\000\000\000\000\000\000\006\000\
    \000\000\007\000\000\000\000\000\010\000\006\000\011\000\007\000\
    \013\000\014\000\014\000\025\000\014\000\015\000\015\000\016\000\
    \015\000\017\000\016\000\026\000\017\000\016\000\027\000\017\000\
    \028\000\031\000\032\000\034\000\035\000\036\000\037\000\038\000\
    \039\000\041\000\043\000\045\000\046\000\049\000\050\000\051\000\
    \052\000\053\000\054\000\055\000\056\000\058\000\059\000\060\000\
    \061\000\063\000\064\000\065\000\067\000\068\000\069\000\072\000\
    \073\000\074\000\076\000\077\000\079\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\024\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 47 "lexer.mll"
            ( token lexbuf )
# 184 "lexer.ml"

  | 1 ->
# 49 "lexer.mll"
            ( token lexbuf )
# 189 "lexer.ml"

  | 2 ->
# 51 "lexer.mll"
             ( EOF )
# 194 "lexer.ml"

  | 3 ->
# 53 "lexer.mll"
                            ( token lexbuf )
# 199 "lexer.ml"

  | 4 ->
let
# 55 "lexer.mll"
              nb
# 205 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 55 "lexer.mll"
                           ( mk_int nb )
# 209 "lexer.ml"

  | 5 ->
# 57 "lexer.mll"
                       ( PUSH )
# 214 "lexer.ml"

  | 6 ->
# 58 "lexer.mll"
                       ( POP )
# 219 "lexer.ml"

  | 7 ->
# 59 "lexer.mll"
                       ( SWAP )
# 224 "lexer.ml"

  | 8 ->
# 60 "lexer.mll"
                       ( NGET )
# 229 "lexer.ml"

  | 9 ->
# 61 "lexer.mll"
                       ( STORE )
# 234 "lexer.ml"

  | 10 ->
# 62 "lexer.mll"
                       ( LOAD )
# 239 "lexer.ml"

  | 11 ->
# 63 "lexer.mll"
                       ( ADD )
# 244 "lexer.ml"

  | 12 ->
# 64 "lexer.mll"
                       ( SUB )
# 249 "lexer.ml"

  | 13 ->
# 65 "lexer.mll"
                       ( MUL )
# 254 "lexer.ml"

  | 14 ->
# 66 "lexer.mll"
                       ( DIV )
# 259 "lexer.ml"

  | 15 ->
# 67 "lexer.mll"
                       ( REM )
# 264 "lexer.ml"

  | 16 ->
# 68 "lexer.mll"
                       ( MOD )
# 269 "lexer.ml"

  | 17 ->
# 69 "lexer.mll"
                       ( PRINT )
# 274 "lexer.ml"

  | 18 ->
let
# 71 "lexer.mll"
         c
# 280 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 71 "lexer.mll"
             ( raise (Location.Error(Printf.sprintf "Illegal character '%c': " c, Location.curr lexbuf)) )
# 284 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

# 74 "lexer.mll"
 
  let rec examine_all lexbuf =
    let result = token lexbuf in
    print_token result;
    print_string " ";
    match result with
    | EOF -> ()
    | _   -> examine_all lexbuf

  let compile file =
  print_string ("File "^file^" is being treated!\n");
  try
    let input_file = open_in file in
    let lexbuf = Lexing.from_channel input_file in
    examine_all lexbuf;
    print_newline ();
    close_in (input_file)
  with Sys_error _ ->
       print_endline ("Can't find file '" ^ file ^ "'")

  let _ = Arg.parse [] compile ""

# 314 "lexer.ml"
